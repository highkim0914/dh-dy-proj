AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws template for asset&metadata CMS

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Tracing: Active
    Runtime: python3.9
    Architectures:
      - x86_64
    Layers:
      - arn:aws:lambda:ap-northeast-2:471413481509:layer:pymysql:2 # 레이어 설정
  Api:
    TracingEnabled: True
    Auth:
      Authorizers:
        CognitoAuth:
          UserPoolArn:
            - arn:aws:cognito-idp:ap-northeast-2:471413481509:userpool/ap-northeast-2_95Reiy0i0 # 기본 권한 부여자 설정
Parameters:
  ProxyName:
    Type: String
    Default: mysqlProxy # db 프록시 이름
  InstanceName:
    Type: String
    Default: mysql
  BootstrapSecretReaderRoleArn:
    Type: String
    Default: arn:aws:iam::471413481509:role/RDSSecretManagerAccessRole # 시크릿 매니저 액세스 가능한 iam 역할
  BootstrapProxySecretArn:
    Type: String
    Default: arn:aws:secretsmanager:ap-northeast-2:471413481509:secret:mysqlDatabaseSecret-5fgk8w # secretsmanager arn
  SubnetIds:
    Type: String
    Default: subnet-b93787d2,subnet-8eef1ed1,subnet-f76a8eb8,subnet-d582efae # db subnet
  LambdaRoleArn:
    Type: String
    Default: arn:aws:iam::471413481509:role/awssamlambdarole

# Event Bridge



Resources:
#asset
  FindAssetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: asset/
      Handler: findAsset.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        FindAsset:
          Type: Api
          Properties:
            Path: /assets/{asset_id}
            Method: get
  FindAssetsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: asset/
      Handler: findAssets.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        FindAssets:
          Type: Api
          Properties:
            Path: /assets
            Method: get
  AddAssetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: asset/
      Handler: addAsset.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        AddAsset:
          Type: Api
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /assets
            Method: post
  UpdateAssetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: asset/
      Handler: updateAsset.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        UpdateAsset:
          Type: Api
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /assets/{asset_id}
            Method: put
  DeleteAssetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: asset/
      Handler: deleteAsset.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        DeleteAsset:
          Type: Api
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /assets/{asset_id}
            Method: delete
  CheckAssetNameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: asset/
      Handler: checkAssetName.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        AddAsset:
          Type: Api
          Properties:
            Path: /assets/names/{asset_name}
            Method: get
  CheckAssetFileHashFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: asset/
      Handler: checkAssetFileHash.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        AddAsset:
          Type: Api
          Properties:
            Path: /assets/{asset_id}/hash
            Method: get
# metadata
  FindPrimaryCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: metadata/
      Handler: findPrimaryCategory.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        FindPrimaryCategory:
          Type: Api
          Properties:
            Path: /meta/primary
            Method: get
        ScheduledFunction:
          Type: Schedule
          Properties:
            Schedule: rate(4 minutes)
  FindSecondaryCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: metadata/
      Handler: findSecondaryCategory.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        FindSecondaryCategory:
          Type: Api
          Properties:
            Path: /meta/secondary/{primary_id}
            Method: get
        ScheduledFunction:
          Type: Schedule
          Properties:
            Schedule: rate(4 minutes)
  FindMetadatasFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: metadata/
      Handler: findMetadatas.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        FindMetadata:
          Type: Api
          Properties:
            Path: /metas
            Method: get
        ScheduledFunction:
          Type: Schedule
          Properties:
            Schedule: rate(4 minutes)
  FindMetadataProjectsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: metadata/
      Handler: findMetadataProjects.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        FindMetadataProjects:
          Type: Api
          Properties:
            Path: /meta/project
            Method: get
        ScheduledFunction:
          Type: Schedule
          Properties:
            Schedule: rate(4 minutes)
  FindMetadataAssetsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: metadata/
      Handler: findMetadataAssets.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        FindMetadataProjects:
          Type: Api
          Properties:
            Path: /meta/asset
            Method: get
        ScheduledFunction:
          Type: Schedule
          Properties:
            Schedule: rate(4 minutes)
  AddMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: metadata/
      Handler: addMetadata.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        AddMetadata:
          Type: Api
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /meta
            Method: post
        ScheduledFunction:
          Type: Schedule
          Properties:
            Schedule: rate(4 minutes)
  UpdateMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: metadata/
      Handler: updateMetadata.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        UpdateMetadata:
          Type: Api
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /meta/{metadata_id}
            Method: put
        ScheduledFunction:
          Type: Schedule
          Properties:
            Schedule: rate(4 minutes)
  DeleteMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: metadata/
      Handler: deleteMetadata.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        DeleteMetadata:
          Type: Api
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /meta/{metadata_id}
            Method: delete
        ScheduledFunction:
          Type: Schedule
          Properties:
            Schedule: rate(4 minutes)
  FindMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: metadata/
      Handler: findMetadata.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        DeleteMetadata:
          Type: Api
          Properties:
            Path: /meta/{metadata_id}
            Method: get
        ScheduledFunction:
          Type: Schedule
          Properties:
            Schedule: rate(4 minutes)

#cognito
  FindUsernameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cognito/
      Handler: findUsername.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        DeleteMetadata:
          Type: Api
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /cognito
            Method: get

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
