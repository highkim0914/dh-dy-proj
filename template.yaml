AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  인턴 과제용 AWS SAM 템플릿

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Tracing: Active
    Runtime: python3.9
    Architectures:
      - x86_64
    Layers:
      - arn:aws:lambda:ap-northeast-2:471413481509:layer:pymysql:1 # 레이어 설정
  Api:
    TracingEnabled: True
    Auth:
      Authorizers:
        CognitoAuth:
          UserPoolArn:
            - arn:aws:cognito-idp:ap-northeast-2:471413481509:userpool/ap-northeast-2_95Reiy0i0 # 기본 권한 부여자 설정
Parameters:
  ProxyName:
    Type: String
    Default: mysqlProxy # db 프록시 이름
  InstanceName:
    Type: String
    Default: mysql
  BootstrapSecretReaderRoleArn:
    Type: String
    Default: arn:aws:iam::471413481509:role/RDSSecretManagerAccessRole # 시크릿 매니저 액세스 가능한 iam 역할
  BootstrapProxySecretArn:
    Type: String
    Default: arn:aws:secretsmanager:ap-northeast-2:471413481509:secret:mysqlDatabaseSecret-5fgk8w # secretsmanager arn
  SubnetIds:
    Type: String
    Default: subnet-b93787d2,subnet-8eef1ed1,subnet-f76a8eb8,subnet-d582efae # db subnet
  LambdaRoleArn:
    Type: String
    Default: arn:aws:iam::471413481509:role/awssamlambdarole

Resources:
  RDBProxy:
    Type: AWS::RDS::DBProxy
    Properties:
      DebugLogging: true
      DBProxyName: !Ref ProxyName
      EngineFamily: MYSQL
      IdleClientTimeout: 120
      RequireTLS: true
      RoleArn:
        !Ref BootstrapSecretReaderRoleArn
      Auth:
        - {AuthScheme: SECRETS, SecretArn: !Ref BootstrapProxySecretArn, IAMAuth: DISABLED}
      VpcSubnetIds:
        Fn::Split: [",", !Ref SubnetIds]
  ProxyTargetGroup:
    Type: AWS::RDS::DBProxyTargetGroup
    Properties:
      DBProxyName: !Ref RDBProxy
      DBInstanceIdentifiers: [!Ref InstanceName]
      TargetGroupName: default
      ConnectionPoolConfigurationInfo:
          MaxConnectionsPercent: 100
          MaxIdleConnectionsPercent: 50
          ConnectionBorrowTimeout: 120
  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Auth:
              Authorizer: CognitoAuth
            Method: get
#asset
  FindAssetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: asset/
      Handler: findAsset.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        FindAsset:
          Type: Api
          Properties:
            Path: /assets/{id}
            Method: get
  FindAssetsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: asset/
      Handler: findAssets.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        FindAsset:
          Type: Api
          Properties:
            Path: /assets
            Method: get
  AddAssetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: asset/
      Handler: addAsset.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        FindAsset:
          Type: Api
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /assets/{asset_id}
            Method: post
  UpdateAssetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: asset/
      Handler: updateAsset.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        FindAsset:
          Type: Api
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /assets/{asset_id}
            Method: put
  DeleteAssetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: asset/
      Handler: deleteAsset.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        FindAsset:
          Type: Api
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /assets/{asset_id}
            Method: delete

# metadata
  FindPrimaryCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: metadata/
      Handler: findPrimaryCategory.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        FindAsset:
          Type: Api
          Properties:
            Path: /meta/primary
            Method: get
  FindSecondaryCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: metadata/
      Handler: findSecondaryCategory.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        FindAsset:
          Type: Api
          Properties:
            Path: /meta/secondary/{primary_id}
            Method: get
  FindMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: metadata/
      Handler: findMetadata.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        FindAsset:
          Type: Api
          Properties:
            Path: /meta
            Method: get
  FindMetadataProjectsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: metadata/
      Handler: findMetadataProjects.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        FindAsset:
          Type: Api
          Properties:
            Path: /meta/project
            Method: get
  AddMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: metadata/
      Handler: addMetadata.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        FindAsset:
          Type: Api
          Properties:
            Path: /meta
            Method: post
  UpdateMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: metadata/
      Handler: updateMetadata.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        FindAsset:
          Type: Api
          Properties:
            Path: /meta/{metadata_id}
            Method: put
  DeleteMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: metadata/
      Handler: deleteMetadata.lambda_handler
      Role: !Ref LambdaRoleArn
      Events:
        FindAsset:
          Type: Api
          Properties:
            Path: /meta/{metadata_id}
            Method: delete



Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
